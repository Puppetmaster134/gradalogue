{"version":3,"file":"static/webpack/static\\development\\pages\\search.js.357af593d8c8c841084e.hot-update.js","sources":["webpack:///./pages/search.js"],"sourcesContent":["// This is the Link API\r\n\r\nimport {\r\n    useRouter\r\n} from 'next/router';\r\n\r\nimport {\r\n    useState\r\n} from 'react';\r\n\r\n\r\n//Fetch\r\nimport fetch from 'isomorphic-unfetch';\r\n\r\n//Flexbox\r\nimport { Grid, Row, Col } from 'react-flexbox-grid'\r\n\r\n//Modals\r\nimport Popup from \"reactjs-popup\";\r\n\r\n//Material UI Grid\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\n//Moment\r\nimport Moment from 'react-moment';\r\nimport 'moment-timezone';\r\n\r\n//Custom Components\r\nimport Layout from '../components/Layout';\r\nimport SearchBar from '../components/searchbar/SearchBar'\r\nimport SearchButton from '../components/searchbar/SearchButton'\r\n\r\n\r\n\r\nexport default function Search(props) {\r\n  const router = useRouter();\r\n\r\n  const useStyles = makeStyles(theme => ({\r\n    root: {\r\n      width: '100%',\r\n      marginTop: theme.spacing(3),\r\n      overflowX: 'auto',\r\n    },\r\n    table: {\r\n      minWidth: 650\r\n    },\r\n    tablecell: {\r\n        fontSize: '.6rem'\r\n    }\r\n  }));\r\n\r\n  const classes = useStyles();\r\n  const [query, setQuery] = useState(props.url.query.query);\r\n\r\n\r\n  return (\r\n      <Layout>\r\n          <Row>\r\n              <Col xs={12}>\r\n                  <h2>Search, you fucking cunt!</h2>\r\n              </Col>\r\n          </Row>\r\n          <Row>\r\n              <Col xs={10}>\r\n                  <SearchBar\r\n                    id=\"MainSearch\"\r\n                    placeholder=\"Enter a University Name, Field of Study, or a Country\"\r\n                    onChange={(msg) =>\r\n                    {\r\n                        setQuery(msg)\r\n                    }}\r\n                    defaultValue={query}/>\r\n              </Col>\r\n              <Col xs={2}>\r\n                  <SearchButton\r\n                    for=\"MainSearch\"\r\n                    callback={() => {\r\n                        Router.push({\r\n                            pathname: '/search',\r\n                            query: { q: ({query}).query }\r\n                        })\r\n                    }}>\r\n                    Run Search!\r\n                </SearchButton>\r\n              </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col xs={12}>\r\n                <Paper className={classes.root}>\r\n                    <Table className={classes.table} size=\"small\">\r\n                    <TableHead>\r\n                      <TableRow>\r\n                        <TableCell className={classes.tablecell} align=\"left\">Accepted</TableCell>\r\n                        <TableCell className={classes.tablecell}  align=\"left\">Attending</TableCell>\r\n                        <TableCell className={classes.tablecell}  align=\"left\">University</TableCell>\r\n                        <TableCell className={classes.tablecell}  align=\"left\">Program</TableCell>\r\n                        <TableCell className={classes.tablecell}  align=\"left\">Degree</TableCell>\r\n                        <TableCell className={classes.tablecell}  align=\"left\">GRE</TableCell>\r\n                        <TableCell className={classes.tablecell}  align=\"left\">Applied</TableCell>\r\n                        <TableCell className={classes.tablecell}  align=\"left\">Decision</TableCell>\r\n                        <TableCell className={classes.tablecell}  align=\"left\">Comments</TableCell>\r\n                      </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {props.searchResults.map(row => (\r\n                            <TableRow key={row.name}>\r\n                              <TableCell className={classes.tablecell}  component=\"th\" scope=\"row\">{row.accepted ? \"Accepted\" : \"Rejected\"}</TableCell>\r\n                              <TableCell className={classes.tablecell}  align=\"left\">{row.accepted ? (row.attending ? \"Attending\" : \"Not Attending\") : \"Rejected, Not Attending\"}</TableCell>\r\n                              <TableCell className={classes.tablecell}  align=\"left\">{row.universityName}</TableCell>\r\n                              <TableCell className={classes.tablecell} align=\"left\">{row.program}</TableCell>\r\n                              <TableCell className={classes.tablecell} align=\"left\">{row.degree}</TableCell>\r\n                              <TableCell className={classes.tablecell} align=\"left\">{row.greVerbal}/{row.greQuantitative}/{row.greWriting}</TableCell>\r\n                              <TableCell className={classes.tablecell} align=\"left\"><Moment format=\"MMM DD,YYYY\">{row.dateApplied}</Moment></TableCell>\r\n                              <TableCell className={classes.tablecell} align=\"left\"><Moment format=\"MMM DD,YYYY\">{row.dateDecision}</Moment></TableCell>\r\n                              <TableCell className={classes.tablecell} align=\"left\">{row.comments}</TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                    </Table>\r\n                </Paper>\r\n            </Col>\r\n          </Row>\r\n      </Layout>\r\n  );\r\n}\r\n\r\n\r\nSearch.getInitialProps = async function(context) {\r\n    let searchResults = [];\r\n\r\n    console.log('Server Call');\r\n\r\n    if(context.query)\r\n    {\r\n        const { q } = context.query;\r\n\r\n        const queryBody = {\r\n            \"params\": {\r\n                \"text\": q\r\n            }\r\n        };\r\n\r\n        console.log('Query Body', q);\r\n\r\n\r\n        const res = await fetch(`http://localhost:3000/api/search`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(queryBody)\r\n        });\r\n\r\n\r\n\r\n        let {\r\n            searchResults\r\n        } = await res.json();\r\n\r\n\r\n        if(!searchResults)\r\n            searchResults = [];\r\n    }\r\n\r\n\r\n\r\n    return { searchResults };\r\n};\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AAIA;AACA;AAKA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AADA;AAGA;AACA;AADA;AATA;AAcsourceRoot":""}